#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

class NewMountNamespace:

    _CLONE_NEWNS = 0x00020000               # <linux/sched.h>
    _MS_REC = 16384                         # <sys/mount.h>
    _MS_PRIVATE = 1 << 18                   # <sys/mount.h>
    _libc = None
    _mount = None
    _setns = None
    _unshare = None

    def __init__(self):
        if self._libc is None:
            self._libc = ctypes.CDLL('libc.so.6', use_errno=True)
            self._mount = self._libc.mount
            self._mount.argtypes = [
                ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_ulong, ctypes.c_char_p]
            self._mount.restype = ctypes.c_int
            self._setns = self._libc.setns
            self._unshare = self._libc.unshare

        self.parentfd = None

    def __enter__(self):
        self.parentfd = open("/proc/%d/ns/mnt" % (os.getpid()), 'r')

        # copied from unshare.c of util-linux
        try:
            if self._unshare(self._CLONE_NEWNS) != 0:
                e = ctypes.get_errno()
                raise OSError(e, errno.errorcode[e])

            srcdir = ctypes.c_char_p("none".encode("utf_8"))
            target = ctypes.c_char_p("/".encode("utf_8"))
            if self._mount(srcdir, target, None, (self._MS_REC | self._MS_PRIVATE), None) != 0:
                e = ctypes.get_errno()
                raise OSError(e, errno.errorcode[e])
        except:
            self.parentfd.close()
            self.parentfd = None
            raise

    def __exit__(self, *_):
        self._setns(self.parentfd.fileno(), 0)
        self.parentfd.close()
        self.parentfd = None


class Main:

    def __init__(self):
        self.user = "git"
        self.group = "git"

        self.tmpDir = None
        self.docRootDir = os.path.join(tmpDir, "root")
        self.apacheDir = os.path.join(tmpDir, "apache")

        os.mkdir(self.docRootDir)
        os.mkdir(self.apacheDir)

        self._genApacheCfg()




    def _genApacheCfg(self):
        buf = ""
        buf += "LoadModule alias_module           /usr/lib/apache2/modules/mod_alias.so\n"
        buf += "LoadModule log_config_module      /usr/lib/apache2/modules/mod_log_config.so\n"
        buf += "LoadModule env_module             /usr/lib/apache2/modules/mod_env.so\n"
        buf += "LoadModule unixd_module           /usr/lib/apache2/modules/mod_unixd.so\n"
        buf += "LoadModule passenger_module       /usr/lib/apache2/modules/mod_passenger.so\n"
        buf += "\n"
        buf += "ServerName none\n"
        buf += "DocumentRoot \"%s\"\n" % (self.docRootDir)
        buf += "\n"
        buf += "PidFile \"%s\"\n" % (os.path.join(self.apacheDir, "apache.pid"))
        buf += "ErrorLog \"%s\"\n" % (os.path.join(self.apacheDir, "error.log"))
        buf += "LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" common\n"
        buf += "CustomLog \"%s\" common\n" % (os.path.join(self.param.apacheDir, "access.log"))
        buf += "\n"
        buf += "User %s\n" % (self.user)
        buf += "Group %s\n" % (self.group)
        buf += "\n"
        buf += "PassengerRoot /usr/lib64/ruby/vendor_ruby/phusion_passenger/locations.ini\n"
        buf += "PassengerDefaultRuby /usr/bin/ruby\n"
        buf += "\n"
        buf += "Listen 80 http\n"
        buf += "\n"
        cfgf = os.path.join(self.apacheDir, "httpd.conf")
        with open(cfgf, "w") as f:
            f.write(buf)














if __name__ == "__main__":
